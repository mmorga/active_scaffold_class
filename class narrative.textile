h1. Intro

To talk about scaffolding we'll be building a piece of an example application.

So as an example we're going to build an online cd store.

h1. Building the Basic Application

h2. Requirements and Dependencies

* Ruby version 1.8.6 or 1.8.7
* Rails version 2.3.4
* Download the rails template from my github.  http://github.com/mmorga/active_scaffold_class
* I'll be using the following gems:
** mbleigh-acts-as-taggable-on
** thoughtbot-shoulda
** thoughtbot-factory_girl
** mislav-will_paginate
** mmorga-money
** ruby-graphviz (if we have time)
* Install graphviz also (which is required by the ruby-graphviz library)
Starting off you'll want to run the template and create your baseline app framework.

rails -m template.rb cdspin

This will ask for your sudo password so it can install the required gems.

h2. Build The First Model

*First Time Try it Old School (to remember why we don't do this anymore)*

script/generate scaffold album title:string release_date:date
rake db:migrate
script/server

Browse to: http://localhost:3000/albums

Pretty ugly, right?

h2. Let's Make it a Little Better

rm app/views/layouts/albums.html.erb

Try - again.  Ooh that's a little nicer.  But the actual form sucks pretty bad.  So let's start up the active scaffold mojo.

Add this to your application.html.erb layout:

<%= javascript_include_tag :defaults %>
<%= active_scaffold_includes %>

And in your album controller, remove all of the lines in the class and replace with the following:

  active_scaffold

Also you need to remove all of the view files that were created.

rm app/views/albums/*

Fix up the routes.  In config/routes.rb

map.resources :albums, :active_scaffold => true

Restart the server.  Looking again, the UI has changed a bit, looks a little bit nicer.

h2. Working with Dates

Looks good except the date is a little hokey still.  

sudo gem install calendar_date_select

Add to the config/environment.rb:
 
config.gem "calendar_date_select" 

Try it out.  Not bad.  But let's hide the created_at and updated_at fields and put the album title first.

First, let's hide the timestamps via a global config.  In application_controller.rb

ActiveScaffold.set_defaults do |config| 
  config.ignore_columns.add [:created_at, :updated_at, :lock_version]
end

Then in the Album Controller:

active_scaffold do |config|
  config.columns = [:title, :release_date]
end

Ok - take another look.  Nice.

Hrm - what about sorting?  Add this to the config:

config.list.sorting = {:title => :asc}

h3. Field Overrides

And make the date format a little nicer.  Add this to the album_helper.rb:

def release_date_column(record)
  record.release_date.strftime("%m/%d/%Y")
end

This is called a field override.  You can use this to change the presentation of particular columns.  We'll do more of this later.  One application I've used is to make a column link to another model when that model isn't presented by active scaffold.

h2. More Scaffold Configuration

Just to be nit-picky, I'd rather have the Release Date be in title caps.  So...add this to the AlbumsController active scaffold config.

config.columns[:release_date].label = "Release Date"

Since our CD sales will work for release dates from the turn of the 20th century...

config.columns[:release_date].options = {:year_range => 1900..Date.today.year}

Albums is kind of old-fashioned (showing my age a little).  Let's try changing the name in the UI.

config.label = "CDs"

h2. Adding a Price to the CD

Ok - now we'll add some money to the mix.  I'm using a fork of the money gem in which I've fixed a couple of bugs and added functionality to make it work for ActiveScaffold.

Create a migration:

script/generate migration add_price_to_album

class AddPriceToAlbum < ActiveRecord::Migration
  def self.up
    add_column :albums, :price_in_cents, :integer, :default => 0
    add_column :albums, :currency, :string, :default => "USD"
  end

  def self.down
    drop_column :albums, :price_in_cents
    drop_column :albums, :currency, :string
  end
end

rake db:migrate

Ok - Now we need to display the price appropriately in the UI.

So let's tell rails how to treat those two columns as money.

composed_of is a rails method of building an attribute in a model out of one or more columns.  The best documentation for this is in active record in a file named aggregations.rb.

Add this to the Album model:

composed_of :price, :class_name => "Money", 
    :mapping => [%w(price_in_cents cents), %w(currency currency)],
    :converter => Proc.new {|value| value.to_money}

Then add to the config:
config.columns = [:title, :release_date, :price]

Take a look.  Cool, but let's add the currency symbol.  Add to the helper:

def price_column(record)
  record.price.format
end

h2. Substituting the Field Input for the Money

Ok, let's say we want to change how the input works for our price.  We can substitute our own version of that fragment of the form.

Create a partial named _price_form_column.html.erb in the app/views/albums directory.

Now - if you want to match the layout, etc. for the rest of the form, you'll want to follow the template of the form partial you are overriding.  You can look at the current version of the form in the active_scaffold gem file:  

frontends/default/views/_form.html.erb

So in our version, we'll change that default to:

<% scope ||= nil %>
<dl class="<%= column.css_class unless column.css_class.nil? %>">
  <dt>
    <label for="<%= active_scaffold_input_options(column, scope)[:id] %>"><%= column.label %> (<%= @record.currency%>)</label>
  </dt>
  <dd>
    <%= active_scaffold_input_for column, scope %>
    <% if column.description -%>
      <span class="description"><%= column.description %></span>
    <% end -%>
  </dd>
</dl>

...in order to include the currency in the field label.  Now we could do other things here too like hook in a special javascript validation for that input field or format the field in some other special way.

If you only want to replace the input portion of the form, you can create a helper method named:

def _price_form_column(record, input_name)
    some_special_money_input_field :record, :price, :name => :input_name
end

h2. How About Relationships

One table isn't very realistic - let's make it a little more interesting.

script/generate scaffold create_artists first_name:string last_name:string

And into this migration add album_artists:

class CreateArtists < ActiveRecord::Migration
  def self.up
    create_table :artists do |t|
      t.string :first_name
      t.string :last_name
      t.timestamps
    end
    
    create_table :album_artists do |t|
      t.references :artist
      t.references :album
      t.timestamps
    end
  end

  def self.down
    drop_table :album_artists
    drop_table :artists
  end
end

Then remove the scaffolded views:

rm app/views/artists/*.erb

And replace the body of artist.rb with:

active_scaffold

Then create/update your models:

class Artist < ActiveRecord::Base
  has_many :album_artists
  has_many :albums, :through => :album_artists
end

class AlbumArtist < ActiveRecord::Base
  belongs_to :album
  belongs_to :artist
end

class Album < ActiveRecord::Base
  has_many :album_artists
  has_many :artists, :through => :album_artists
  
  composed_of :price, :class_name => "Money", 
      :mapping => [%w(price_in_cents cents), %w(currency currency)],
      :converter => Proc.new {|value| value.to_money}
end

Now in your albums controller, modify your config.columns:

config.columns = [:title, :release_date, :price, :artists]

Now load up some data:

Create your thoughtbot factory_girl factories, in test/factories.rb:

Factory.define :artist do |a|
  a.first_name 'John'
  a.sequence(:last_name) {|n| "X#{n}" }
end

Factory.define :album do |a|
  a.sequence(:title) {|n| "Superfly vol #{n}"}
  a.release_date Date.today
end

Then in script console, you can play around and create a few albums and factories.  For example:

Factory(:album, :artists => (1..3).collect {|n| Factory(:artist)})

Ok, no look at it in the API.  The artists are shown, but they look like:

#<Artist:0x232eab8>, #<Artist:0x232ea68>, #<Artist:0x232ea04>

No very user friendly.  Turns out that active scaffold looks for a few methods to determine the textual display of a model.  They are: :to_label, :name, :label, :title, and finally :to_s. 

So to create an active_scaffold specific method in your model, implement to_label in your artist model.

You probably don't want the default edit behavior that you get.  You can make the associated artist view only when editing an album.

In the album_controller.rb active_scaffold config block, add:

Ok - this is better, but probably not great for the long term.  Instead, this is a prime candidate for the form overrides.

h2. Search

Once you get the route added and basic active scaffold in place, you get search for free.

Active Scaffold also provides an ajax search capability via the live search API.  Look this up.

h2. Template Overrides

Any of the templates or partials in the active_scaffold views directory can by overridden by creating a file with the same name in the app/views/active_scaffold_overrides/ directory of your application.

h2. Security

h3. Selecting the current user method

In your global config:

config.security.current_user_method = :current_login
config.security.default_permission = false

Then implement current_login in your controller.

h3. Permitting Actions (Controller Level)

In each controller then, you can implement permissions by adding a method named "#{action}_authorized?"

h3. Permissions (Model Level)

#{column_name}_authorized_for_#{crud_action}?
#{column_name}_authorized?
authorized_for_#{crud_action}?

h2. Embedded Scaffolds

You can reuse the active scaffolds in other pages which makes a nice way to build up your composite objects (or make easier editing of your associated objects).

h3. Rendering Scaffolds

# render UsersController 
render :active_scaffold => 'users'

# the same, but this time change the heading to "Active Users"
render :active_scaffold => 'users', :label => 'Active Users'

# sorting by `name`, ascending
render :active_scaffold => 'users', :sort => "name", :sort_direction => "ASC"

h3. Constraints

If you are rendering something on a page that is tied to a particular constraint (such as a foreign key), you can pass that constraint to the render call.  Examples:

# render all entries for a user
render :active_scaffold => 'entries', :constraints => { :user_id => @user.id }

# render all active users
render :active_scaffold => 'users', :constraints => { :status => "active" }

h3. Conditions

If you need a little more flexibility, you can use conditions for comparisons other than equality.

# note: example hasn't been tested for typos or other obvious problems
render :active_scaffold => 'users', :conditions => ['created_at > ?', Time.now - 5.days], :label => 'New Users'

h2. Action Link

The action link on a config allows you to modify the links used for scaffolds.  It is particularly useful if you have an association that isn't an active scaffold object and you want to link to the correct show/edit pages.

For example:

config.columns[:username].link

