h1. Intro

To talk about scaffolding we'll be building a piece of an example application.

So as an example we're going to build an online cd store.

h1. Building the Basic Application

h2. Requirements and Dependencies

* Ruby version 1.8.6 or 1.8.7
* Rails version 2.3.4
* Download the rails template from my github.  http://github.com/mmorga/active_scaffold_class
* I'll be using the following gems:
** mbleigh-acts-as-taggable-on
** thoughtbot-shoulda
** thoughtbot-factory_girl
** mislav-will_paginate
** mmorga-money
** ruby-graphviz (if we have time)
* Install graphviz also (which is required by the ruby-graphviz library)
Starting off you'll want to run the template and create your baseline app framework.

rails -m template.rb cdspin

This will ask for your sudo password so it can install the required gems.

h2. Build The First Model

*First Time Try it Old School (to remember why we don't do this anymore)*

script/generate scaffold album title:string release_date:date
rake db:migrate
script/server

Browse to: http://localhost:3000/albums

Pretty ugly, right?

h2. Let's Make it a Little Better

rm app/views/layouts/albums.html.erb

Try - again.  Ooh that's a little nicer.  But the actual form sucks pretty bad.  So let's start up the active scaffold mojo.

Add this to your application.html.erb layout:

<%= javascript_include_tag :defaults %>
<%= active_scaffold_includes %>

And in your album controller, remove all of the lines in the class and replace with the following:

  active_scaffold

Also you need to remove all of the view files that were created.

rm app/views/albums/*

Looking again, the UI has changed a bit, looks a little bit nicer.

h2. Working with Dates

Looks good except the date is a little hokey still.  

sudo gem install calendar_date_select

Add to the config/environment.rb:
 
config.gem "calendar_date_select" 

Try it out.  Not bad.  But let's hide the created_at and updated_at fields and put the album title first.

First, let's hide the timestamps via a global config.  In application_controller.rb

ActiveScaffold.set_defaults do |config| 
  config.ignore_columns.add [:created_at, :updated_at, :lock_version]
end

Then in the Album Controller:

active_scaffold do |config|
  config.columns = [:title, :release_date]
end

Ok - take another look.  Nice.

Hrm - what about sorting?  Add this to the config:

config.list.sorting = {:title => :asc}

h3. Field Overrides

And make the date format a little nicer.  Add this to the album_helper.rb:

def release_date_column(record)
  record.release_date.strftime("%m/%d/%Y")
end

This is called a field override.  You can use this to change the presentation of particular columns.  We'll do more of this later.  One application I've used is to make a column link to another model when that model isn't presented by active scaffold.

h2. More Scaffold Configuration

Just to be nit-picky, I'd rather have the Release Date be in title caps.  So...add this to the AlbumsController active scaffold config.

config.columns[:release_date].label = "Release Date"

Since our CD sales will work for release dates from the turn of the 20th century...

config.columns[:release_date].options = {:year_range => 1900..Date.today.year}

Albums is kind of old-fashioned (showing my age a little).  Let's try changing the name in the UI.

config.label = "CDs"

h2. Adding a Price to the CD

Ok - now we'll add some money to the mix.  I'm using a fork of the money gem in which I've fixed a couple of bugs and added functionality to make it work for ActiveScaffold.

Create a migration:

script/generate migration add_price_to_album

class AddPriceToAlbum < ActiveRecord::Migration
  def self.up
    add_column :albums, :price_in_cents, :integer, :default => 0
    add_column :albums, :currency, :string, :default => "USD"
  end

  def self.down
    drop_column :albums, :price_in_cents
    drop_column :albums, :currency, :string
  end
end

rake db:migrate

Ok - Now we need to display the price appropriately in the UI.

So let's tell rails how to treat those two columns as money.

composed_of is a rails method of building an attribute in a model out of one or more columns.  The best documentation for this is in active record in a file named aggregations.rb.

Add this to the Album model:

composed_of :price, :class_name => "Money", 
    :mapping => [%w(price_in_cents cents), %w(currency currency)],
    :converter => Proc.new {|value| value.to_money}

Then add to the config:
config.columns = [:title, :release_date, :price]

Take a look.  Cool, but let's add the currency symbol.  Add to the helper:

def price_column(record)
  record.price.format
end

h2. Substituting the Field Input for the Money

Ok, let's say we want to change how the input works for our price.  We can substitute our own version of that fragment of the form.

Create a partial named _price_form_column.html.erb in the app/views/albums directory.

Now - if you want to match the layout, etc. for the rest of the form, you'll want to follow the template of the form partial you are overriding.  You can look at the current version of the form in the active_scaffold gem file:  

frontends/default/views/_form.html.erb

So in our version, we'll change that default to:

<% scope ||= nil %>
<dl class="<%= column.css_class unless column.css_class.nil? %>">
  <dt>
    <label for="<%= active_scaffold_input_options(column, scope)[:id] %>"><%= column.label %> (<%= @record.currency%>)</label>
  </dt>
  <dd>
    <%= active_scaffold_input_for column, scope %>
    <% if column.description -%>
      <span class="description"><%= column.description %></span>
    <% end -%>
  </dd>
</dl>

...in order to include the currency in the field label.  Now we could do other things here too like hook in a special javascript validation for that input field or format the field in some other special way.





If you only want to replace the input portion of the form, you can create a helper method named:

def _price_form_column(record, input_name)
    some_special_money_input_field :record, :price, :name => :input_name
end

h1. Other Topics

* Adding scaffolds with relationships
** Changing the presentation of fields
*** to_label

* Changing the input form fields

** Form overrides
*** Subforms    
** Template overrides

* Search
** Configuration
** LiveSearch

* Security

* More Complex Uses
** Embedding the scaffold on other pages

* Rendering
** Constraints
** Nested Constraints
